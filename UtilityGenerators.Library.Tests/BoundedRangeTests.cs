namespace RhoMicro.CodeAnalysis.Library.Tests;

using System;

public class BoundedRangeTests
{
    public static Object[][] ContainsData
    {
        get
        {
            return
            [
                [-8, 5, false, false, 0],
                [-8, 5, false, false, -7],
                [-8, 5, false, false, 4],
                [-8, 5, false, true, 0],
                [-8, 5, false, true, -7],
                [-8, 5, false, true, 5],
                [-8, 5, true, false, 0],
                [-8, 5, true, false, -8],
                [-8, 5, true, false, 4],
                [-8, 5, true, true, 0],
                [-8, 5, true, true, -8],
                [-8, 5, true, true, 5],
                [-6, 8, false, false, 0],
                [-6, 8, false, false, -5],
                [-6, 8, false, false, 7],
                [-6, 8, false, true, 0],
                [-6, 8, false, true, -5],
                [-6, 8, false, true, 8],
                [-6, 8, true, false, 0],
                [-6, 8, true, false, -6],
                [-6, 8, true, false, 7],
                [-6, 8, true, true, 0],
                [-6, 8, true, true, -6],
                [-6, 8, true, true, 8],
                [-7, 9, false, false, 0],
                [-7, 9, false, false, -6],
                [-7, 9, false, false, 8],
                [-7, 9, false, true, 0],
                [-7, 9, false, true, -6],
                [-7, 9, false, true, 9],
                [-7, 9, true, false, 0],
                [-7, 9, true, false, -7],
                [-7, 9, true, false, 8],
                [-7, 9, true, true, 0],
                [-7, 9, true, true, -7],
                [-7, 9, true, true, 9],
                [-9, 8, false, false, 0],
                [-9, 8, false, false, -8],
                [-9, 8, false, false, 7],
                [-9, 8, false, true, 0],
                [-9, 8, false, true, -8],
                [-9, 8, false, true, 8],
                [-9, 8, true, false, 0],
                [-9, 8, true, false, -9],
                [-9, 8, true, false, 7],
                [-9, 8, true, true, 0],
                [-9, 8, true, true, -9],
                [-9, 8, true, true, 8],
                [-7, 8, false, false, 0],
                [-7, 8, false, false, -6],
                [-7, 8, false, false, 7],
                [-7, 8, false, true, 0],
                [-7, 8, false, true, -6],
                [-7, 8, false, true, 8],
                [-7, 8, true, false, 0],
                [-7, 8, true, false, -7],
                [-7, 8, true, false, 7],
                [-7, 8, true, true, 0],
                [-7, 8, true, true, -7],
                [-7, 8, true, true, 8],
                [-22, 57, false, false, 0],
                [-22, 57, false, false, -21],
                [-22, 57, false, false, 56],
                [-22, 57, false, true, 0],
                [-22, 57, false, true, -21],
                [-22, 57, false, true, 57],
                [-22, 57, true, false, 0],
                [-22, 57, true, false, -22],
                [-22, 57, true, false, 56],
                [-22, 57, true, true, 0],
                [-22, 57, true, true, -22],
                [-22, 57, true, true, 57],
                [-44, 19, false, false, 0],
                [-44, 19, false, false, -43],
                [-44, 19, false, false, 18],
                [-44, 19, false, true, 0],
                [-44, 19, false, true, -43],
                [-44, 19, false, true, 19],
                [-44, 19, true, false, 0],
                [-44, 19, true, false, -44],
                [-44, 19, true, false, 18],
                [-44, 19, true, true, 0],
                [-44, 19, true, true, -44],
                [-44, 19, true, true, 19],
                [-53, 80, false, false, 0],
                [-53, 80, false, false, -52],
                [-53, 80, false, false, 79],
                [-53, 80, false, true, 0],
                [-53, 80, false, true, -52],
                [-53, 80, false, true, 80],
                [-53, 80, true, false, 0],
                [-53, 80, true, false, -53],
                [-53, 80, true, false, 79],
                [-53, 80, true, true, 0],
                [-53, 80, true, true, -53],
                [-53, 80, true, true, 80],
                [-45, 28, false, false, 0],
                [-45, 28, false, false, -44],
                [-45, 28, false, false, 27],
                [-45, 28, false, true, 0],
                [-45, 28, false, true, -44],
                [-45, 28, false, true, 28],
                [-45, 28, true, false, 0],
                [-45, 28, true, false, -45],
                [-45, 28, true, false, 27],
                [-45, 28, true, true, 0],
                [-45, 28, true, true, -45],
                [-45, 28, true, true, 28],
                [-70, 41, false, false, 0],
                [-70, 41, false, false, -69],
                [-70, 41, false, false, 40],
                [-70, 41, false, true, 0],
                [-70, 41, false, true, -69],
                [-70, 41, false, true, 41],
                [-70, 41, true, false, 0],
                [-70, 41, true, false, -70],
                [-70, 41, true, false, 40],
                [-70, 41, true, true, 0],
                [-70, 41, true, true, -70],
                [-70, 41, true, true, 41]
            ];
        }
    }
    public static Object[][] NotContainsData
    {
        get
        {
            return
            [
                [-22, 13, false, false, -2147483648],
                [-22, 13, false, false, 2147483647],
                [-22, 13, false, false, -22],
                [-22, 13, false, false, 13],
                [-22, 13, false, true, -2147483648],
                [-22, 13, false, true, 2147483647],
                [-22, 13, false, true, -22],
                [-22, 13, false, true, 14],
                [-22, 13, true, false, -2147483648],
                [-22, 13, true, false, 2147483647],
                [-22, 13, true, false, -23],
                [-22, 13, true, false, 13],
                [-22, 13, true, true, -2147483648],
                [-22, 13, true, true, 2147483647],
                [-22, 13, true, true, -23],
                [-22, 13, true, true, 14],
                [-41, 12, false, false, -2147483648],
                [-41, 12, false, false, 2147483647],
                [-41, 12, false, false, -41],
                [-41, 12, false, false, 12],
                [-41, 12, false, true, -2147483648],
                [-41, 12, false, true, 2147483647],
                [-41, 12, false, true, -41],
                [-41, 12, false, true, 13],
                [-41, 12, true, false, -2147483648],
                [-41, 12, true, false, 2147483647],
                [-41, 12, true, false, -42],
                [-41, 12, true, false, 12],
                [-41, 12, true, true, -2147483648],
                [-41, 12, true, true, 2147483647],
                [-41, 12, true, true, -42],
                [-41, 12, true, true, 13],
                [-52, 95, false, false, -2147483648],
                [-52, 95, false, false, 2147483647],
                [-52, 95, false, false, -52],
                [-52, 95, false, false, 95],
                [-52, 95, false, true, -2147483648],
                [-52, 95, false, true, 2147483647],
                [-52, 95, false, true, -52],
                [-52, 95, false, true, 96],
                [-52, 95, true, false, -2147483648],
                [-52, 95, true, false, 2147483647],
                [-52, 95, true, false, -53],
                [-52, 95, true, false, 95],
                [-52, 95, true, true, -2147483648],
                [-52, 95, true, true, 2147483647],
                [-52, 95, true, true, -53],
                [-52, 95, true, true, 96],
                [-63, 8, false, false, -2147483648],
                [-63, 8, false, false, 2147483647],
                [-63, 8, false, false, -63],
                [-63, 8, false, false, 8],
                [-63, 8, false, true, -2147483648],
                [-63, 8, false, true, 2147483647],
                [-63, 8, false, true, -63],
                [-63, 8, false, true, 9],
                [-63, 8, true, false, -2147483648],
                [-63, 8, true, false, 2147483647],
                [-63, 8, true, false, -64],
                [-63, 8, true, false, 8],
                [-63, 8, true, true, -2147483648],
                [-63, 8, true, true, 2147483647],
                [-63, 8, true, true, -64],
                [-63, 8, true, true, 9],
                [-41, 35, false, false, -2147483648],
                [-41, 35, false, false, 2147483647],
                [-41, 35, false, false, -41],
                [-41, 35, false, false, 35],
                [-41, 35, false, true, -2147483648],
                [-41, 35, false, true, 2147483647],
                [-41, 35, false, true, -41],
                [-41, 35, false, true, 36],
                [-41, 35, true, false, -2147483648],
                [-41, 35, true, false, 2147483647],
                [-41, 35, true, false, -42],
                [-41, 35, true, false, 35],
                [-41, 35, true, true, -2147483648],
                [-41, 35, true, true, 2147483647],
                [-41, 35, true, true, -42],
                [-41, 35, true, true, 36]
            ];
        }
    }

    [Theory]
    [MemberData(nameof(ContainsData))]
    public void Contains(Int32 leftBound, Int32 rightBound, Boolean leftClosed, Boolean rightClosed, Int32 value)
    {
        var interval = BoundedInterval.Create(leftBound, rightBound, leftClosed, rightClosed);
        var actual = interval.Contains(value);

        Assert.True(actual);
    }
    [Theory]
    [MemberData(nameof(NotContainsData))]
    public void NotContains(Int32 leftBound, Int32 rightBound, Boolean leftClosed, Boolean rightClosed, Int32 value)
    {
        var interval = BoundedInterval.Create(leftBound, rightBound, leftClosed, rightClosed);
        var actual = interval.Contains(value);

        Assert.False(actual);
    }
}
